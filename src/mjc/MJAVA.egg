-- PROJET3 STL 11-12 - micro java : grammaire 
option auto= true;
option version = 0.0.0 ;
option k=3;

-- les attributs semantiques
inh source : MJAVASourceFile for PROGRAMME;
syn type : DTYPE for TYPE, OPUN, OPMUL, OPADD, T, TX, ESX, F;
syn code : STRING for F, OPUN, OPMUL, OPADD, T, TX, ESX, INST, INSTS, BLOC, DEF, DEFS;
inh tds : TDS for DEF;
inh machine : AbstractMachine for F, OPUN, OPMUL, OPADD, INST;

-- les terminaux 
space separateur is  "[\r\n\t ]+";     
space comm is  "\/\/[^\n]*\n";
sugar paro is  "\(";
sugar parf is  "\)";
sugar aco is  "\{";     
sugar acf is  "\}"; 
sugar cro is  "\["; 
sugar crf is  "\]";
sugar virg is  ",";
sugar pv is  "\;";
sugar pt is  "\.";
sugar affect is  "=";
sugar si is  "if";
sugar sinon is  "else";
sugar void is  "void";
sugar int is  "int";
sugar bool is  "boolean";
sugar classe is  "class";
sugar interface is  "interface";
sugar etend is  "extends";
sugar implemente is  "implements";
sugar retour is  "return";
sugar nouveau is  "new";
sugar null is  "null";
sugar inf is  "\<";
sugar infeg is  "\<=";
sugar sup is  "\>";
sugar supeg is  "\>=";
sugar eg is  "==";
sugar neg is  "\!=";
sugar plus is  "\+";
sugar moins is  "\-";
sugar ou is  "\|\|";
sugar mult is  "\*";
sugar div is  "\/";
sugar mod is  "\%" ; 
sugar et is  "\&\&";
sugar non is  "\!";
sugar vrai is  "true";
sugar faux is  "false";
term entier is  "[0-9]+";
term ident is  "[_A-Za-z][_0-9A-Za-z]*";

---------- REGLES DE PRODUCTION ----------------------------------------
PROGRAMME -> #init ENTITES #gen;
global
   machine : AbstractMachine;
   
#init {
 do
   machine := PROGRAMME^source.getMachine();
   ENTITES^machine := machine;
end
}

#gen {
 do
   call machine.writeCode(PROGRAMME^source.getFileName(), ENTITES^code);
 end
}

ENTITES -> #gen;
#gen {
 do
   ENTITES^code := ENTITES^machine.genFin();
 end
}

ENTITES -> DEFCLASSE ENTITES #gen;
#gen {
 do
   ENTITES^code := DEFCLASSE^code + ENTITES1^code;
 end
}

ENTITES -> DEFINTERFACE ENTITES #gen;
#gen {
 do
   ENTITES^code := DEFINTERFACE^code + ENTITES1^code;
 end
}
-------------------------------------------------------
-- definition d'une classe
-------------------------------------------------------
DEFCLASSE -> classe ident SUPER CORPS ;
DEFCLASSE -> classe ident etend ident CORPS ;
DEFCLASSE -> classe ident implemente ident CORPS ;
DEFINTERFACE -> interface ident SUPER CORPS;
DEFINTERFACE -> interface ident etend ident CORPS;

-------------------------------------------------------
-- 1 extends maximum suivi d'un implements maximum
-------------------------------------------------------
SUPER -> ETEND IMPL ;
ETEND -> ;
ETEND -> etend ident ;
IMPL -> ;
IMPL -> implemente ident ;
CORPS -> aco DEFS acf ;

-------------------------------------------------------
-- les attributs
-------------------------------------------------------
DEFS -> #gen;
#gen {
 do
   DEFS^code := "";
 end
}

DEFS -> DEF DEFS #gen;
#gen {
 do
   DEFS^code := DEF^code + DEFS1^code;
 end
}

-------------------------------------------------------
-- attribut
-------------------------------------------------------
DEF -> TYPE ident pv  #inf;
#inf {
 local
   i : INFO;
   t : DTYPE;
 do
    i := DEF^tds.chercherGlobalement(ident^txt);
    if i /= nil then
       error(B_02, ident^txt);
    else
   -- ajouter l'ident dans la TDS;
   i := new INFO(TYPE^type);
   call DEF^tds.inserer(ident^txt, i);
   DEF^code := "";
 end
}

-------------------------------------------------------
-- methode (fonction) 
-------------------------------------------------------
DEF -> TYPE ident paro PARFS parf MCORPS  ;

-------------------------------------------------------
-- methode (procedure)
-------------------------------------------------------
DEF -> void ident paro PARFS parf MCORPS  ;

-------------------------------------------------------
-- dans classe ou dans interface
-------------------------------------------------------
MCORPS -> pv ;
MCORPS -> BLOC ;

-------------------------------------------------------
-- constructeur
-------------------------------------------------------
DEF -> ident paro PARFS parf BLOC  ; 

-------------------------------------------------------
-- les types
-------------------------------------------------------
TYPE -> int #type;
#type {
 do
   TYPE^type := new DTYPE("entier", 1);
 end
}

TYPE -> bool #type;
#type {
 do
   TYPE^type := new DTYPE("booleen", 1);
 end
}

TYPE -> ident #type;
#type {
 local
   i : INFO ;
   it : INFOTYPE;
   t : DTYPE;
 do
   -- rechercher l'ident   
   i := TYPE^tds.chercherGlobalement(ident^txt);
   if i = nil then
     error(B_03, ident^txt);
   else
     match i
       with INFOTYPE then
         it := i ;
         TYPE^type :=  it.getType();
       else
         error(B_04, ident^txt);
     end
   end
 end
}

-------------------------------------------------------
-- parametres de methodes
-------------------------------------------------------
PARFS -> ;
PARFS -> PARF PARFSX ;
PARFSX -> ;
PARFSX -> virg  PARF  PARFSX ;
PARF -> TYPE ident  ;

-------------------------------------------------------
-- corps de methode et bloc d'instructions
-------------------------------------------------------
BLOC -> aco INSTS acf #gen;
#gen {
 do
   BLOC^code := INSTS^code;
 end
}

-------------------------------------------------------
-- instructions
-------------------------------------------------------
INSTS -> #gen;
#gen {
 do
   INSTS^code := "";
 end
}

INSTS -> INST INSTS #gen;
#gen {
 do
   INSTS^code := INST^code + INSTS1^code;
 end
}

-------------------------------------------------------
-- declaration de variable locale avec ou sans init
-------------------------------------------------------
INST-> TYPE ident AFFX pv ;

-------------------------------------------------------
-- instruction expression
-------------------------------------------------------
INST -> E pv ;

-------------------------------------------------------
-- bloc d'instructions
-------------------------------------------------------
INST -> BLOC #gen;
#gen {
 do
   INST^code := BLOC^code;
 end
}

-------------------------------------------------------
-- conditionnelle
-------------------------------------------------------
INST -> si paro E #type parf BLOC SIX #gen;
#gen {
 do
   INST^code := INST^machine.genIf(E^code, BLOC^code, SIX^code);
 end
}
#type {
do
 if ~E^type.compareTo(new DTYPE("booleen", 1)) then
   error(B_05, E^type);
 end
end
}

SIX -> sinon BLOC #gen;
#gen {
 do
   SIX^code := BLOC^code;
 end
}

SIX -> #gen;
#gen {
 do
   SIX^code := "";
 end
}

-------------------------------------------------------
-- return
-------------------------------------------------------
INST -> retour E pv #gen;
#gen {
 do
   INST^code := INST^machine.genReturn(E^code);
 end
}

-------------------------------------------------------
-- les expressions
-------------------------------------------------------
E -> ER AFFX #gen;
#gen {
 do
   E^code := ER^code + AFFX^code;
 end
}

-------------------------------------------------------
-- affectation
-------------------------------------------------------
-- AFAIRE
AFFX -> affect ER #gen;
#gen {
 do
 end
}

AFFX -> #gen;
#gen {
 do 
   AFFX^code := "";
 end
}

-------------------------------------------------------
-- relation
-------------------------------------------------------
ER -> ES ERX #gen;
#gen {
 do
   ER^code := ES^code + ERX^code;
 end
}

ES -> T ESX #gen;
#gen {
 do
   ES^code := T^code + ESX^code;
 end
}

ERX -> OPREL ES #gen;
#gen {
 do
   ERX^code := ES^code + OPREL^code;
 end
}

ERX -> #gen;
#gen {
 do
   ERX^code := "";
 end
}

OPREL -> inf #gen;
#gen {
 do
   OPREL^code := OPREL^machine.genOpInf();
 end
}

OPREL -> infeg #gen;
#gen {
 do
   OPREL^code := OPREL^machine.genOpInfeg();
 end
}

OPREL -> sup #gen;
#gen {
 do
   OPREL^code := OPREL^machine.genOpSup();
 end
}

OPREL -> supeg #gen;
#gen {
 do
   OPREL^code := OPREL^machine.genSupeg();
 end
}

OPREL -> eg #gen;
#gen {
 do
   OPREL^code := OPREL^machine.genEg();
 end
}

OPREL -> neg #gen;
#gen {
 do
   OPREL^code := OPREL^machine.genNeg();
 end
}

-------------------------------------------------------
-- addition, ...
-------------------------------------------------------
ESX -> OPADD T ESX #gen;
#gen {
 do
   if ~T^type.compareTo(OPADD^type) then
     error(B_00, T^type, OPADD^type);
   elseif ~T^type.compareTo(ESX^type) then
     error(B_00, T^type, ESX1^type);
   else
     ESX^type := T^type;
     ESX^code := T^code + ESX1^code + OPADD^code;
   end
 end
}

ESX -> #gen;
#gen {
 do
   ESX^code := "";
 end
}

OPADD -> plus #gen;
#gen {
 do
   OPADD^type := new DTYPE("entier", 1);
   OPADD^code := OPADD^machine.genOpAdd();
 end
}

OPADD -> moins #gen;
#gen {
 do
   OPADD^type := new DTYPE("entier", 1);
   OPADD^code := OPADD^machine.genOpMin();
 end
}

OPADD -> ou #gen;
#gen {
 do
   OPADD^type := new DTYPE("booleen", 1);
   OPADD^code := OPADD^machine.genOpOu();
 end
}

T ->  F TX #gen;
#gen {
 do
   if ~F^type.compareTo(TX^type) then
     error(B_00, F^type, TX^type);
   else
     T^type := TX^type;
     T^code := T^machine.genOp(F^code,TX^code);
   end
 end
}

-------------------------------------------------------
-- multiplication, ...
-------------------------------------------------------
TX -> OPMUL F TX #gen;
#gen {
 do
   if ~F^type.compareTo(OPMUL^type) then
     error(B_00, F^type, OPMUL^type);
   elseif ~F^type.compareTo(TX1^type) then
     error(B_00, F^type, TX1^type);
   else
     TX^type := TX1^type;
     TX^code := F^code + TX1^code + OPMUL^code;
   end
 end
}

TX -> #gen;
#gen {
 do
   TX^code := "";
 end
}

OPMUL -> mult #gen;
#gen {
 do
   OPMUL^type := new DTYPE("entier", 1);
   OPMUL^code := OPUN^machine.genOpMul();
 end
}

OPMUL -> div #gen;
#gen {
 do
   OPMUL^type := new DTYPE("entier", 1);
   OPMUL^code := OPUN^machine.genOpDiv();
 end
}

OPMUL -> mod #gen;
#gen {
 do
   OPMUL^type := new DTYPE("entier", 1);
   OPMUL^code := OPUN^machine.genOpMod();
 end
}

OPMUL -> et #gen;
#gen {
 do
   OPMUL^type := new DTYPE("booleen", 1);
   OPMUL^code := OPUN^machine.genOpEt();
 end
}

-------------------------------------------------------
-- expressions de base
-------------------------------------------------------
F -> entier #gen;
#gen {
 do
   F^type := new DTYPE("entier", 1);
   F^code := F^machine.genCst(entier^txt);
 end
}

F -> vrai #gen;
#gen {
 do
   F^type := new DTYPE("booleen", 1);
   F^code := F^machine.genCst("1");
 end
}

F -> faux #gen;
#gen {
 do
   F^type := new DTYPE("booleen", 1);
   F^code := F^machine.genCst("0");
 end
}

-------------------------------------------------------
-- unaire
-------------------------------------------------------
F -> OPUN F #gen;
#gen {
 do
   if ~F1^type.compareTo(OPUN^type) then
     error(B_00, F1^type, OPUN^type);
   else
     F^type := F1^type;
     F^code := F1^code + OPUN^code;
   end
 end
}

OPUN -> plus #gen;
#gen {
 do
   OPUN^type := new DTYPE("entier", 1);
   OPUN^code := OPUN^machine.genOpPlus();
 end
}

OPUN -> moins #gen;
#gen {
 do
   OPUN^type := new DTYPE("entier", 1);
   OPUN^code := OPUN^machine.genOpMoins();
 end
}

OPUN -> non #gen;
#gen {
 do
   OPUN^type := new DTYPE("booleen", 1);
   OPUN^code := OPUN^machine.genOpNon();
 end
}

-------------------------------------------------------
-- null
-------------------------------------------------------
F -> null  ;

F -> paro E parf #gen;
#gen {
 do
   F^type := E^type;
   F^code := E^code;
 end
}

-------------------------------------------------------
-- new
-------------------------------------------------------
-- définir l'erreur d'arguments sur TYPE : AFAIRE
F -> nouveau TYPE paro ARGS parf #gen;
#gen {
 do
   if then
     error(B_01, TYPE^type)
   else
     F^type := TYPE^type;
   end
 end
}

F -> ident Q #gen;
#gen {
 do
 end
}

-------------------------------------------------------
-- Q = qualificateur de variable
-------------------------------------------------------
Q -> #gen;

-------------------------------------------------------
-- acces attribut
-------------------------------------------------------
Q -> pt ident  Q ;

-------------------------------------------------------
-- arguments d'appel de methode
-------------------------------------------------------
Q -> paro ARGS parf Q ;
ARGS ->  E ARGSX  ;
ARGS -> ;
ARGSX ->   virg E ARGSX  ;
ARGSX -> ;

end
