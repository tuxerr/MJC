-- PROJET3 STL 11-12 - micro java : grammaire 
option auto= true;
option version = 0.0.0 ;
option k=3;

-- les attributs semantiques
inh source : MJAVASourceFile for PROGRAMME;
syn type : DTYPE for TYPE, PARF, AFFX, E, ER, ERX, ES, T, ESX, OPADD, F, TX, OPMUL, OPUN, Q;
syn ltype : ARGS for PARFS, Q, ARGS;
inh machine : ABSTRACTMACHINE for ENTITES, DEFCLASSE, DEFINTERFACE, CORPS, DEFS, DEF, BLOC, INSTS, INST, SIX, E, ER, ERX, ES, ESX, T, TX, F, OPASS, OPMUL, OPUN, Q;
syn code : STRING for ENTITES, DEFCLASSE, DEFINTERFACE, CORPS, DEFS, DEF, BLOC, INSTS, INST, SIX, AFFX, E, ER, ERX, ES, ESX, T, TX, F, OPASS, OPMUL, OPUN, Q, ARGS, ARGSX;
inh tds : TDS for ENTITES, DEFCLASSE, DEFINTERFACE, CORPS, DEF, DEFS, MCORPS, BLOC;
inh hident : STRING for Q;
syn est_affectable : BOOLEAN for E, ER, ERX, ES, ESX, T, TX, F, Q;
syn adr : INTEGER for DEF, DEFS, INST, INSTS;
inh hadr : INTEGER for DEFCLASSE, DEFINTERFACE, DEF, DEFS, INST, INSTS, BLOC;
syn ext : STRING for ETEND, SUPER;
syn imp : STRING for IMPL, SUPER;
inh dep : INTEGER for ARGS, ARGSX;
syn name : STRING for PARF;
inh isclass : BOOLEAN for CORPS, DEFS, DEF, MCORPS;

-- les terminaux 
space separateur is  "[\r\n\t ]+";     
space comm is  "\/\/[^\n]*\n";
sugar paro is  "\(";
sugar parf is  "\)";
sugar aco is  "\{";     
sugar acf is  "\}"; 
sugar cro is  "\["; 
sugar crf is  "\]";
sugar virg is  ",";
sugar pv is  "\;";
sugar pt is  "\.";
sugar affect is  "=";
sugar si is  "if";
sugar sinon is  "else";
sugar void is  "void";
sugar int is  "int";
sugar bool is  "boolean";
sugar classe is  "class";
sugar interface is  "interface";
sugar etend is  "extends";
sugar implemente is  "implements";
sugar retour is  "return";
sugar nouveau is  "new";
sugar null is  "null";
sugar inf is  "\<";
sugar infeg is  "\<=";
sugar sup is  "\>";
sugar supeg is  "\>=";
sugar eg is  "==";
sugar neg is  "\!=";
sugar plus is  "\+";
sugar moins is  "\-";
sugar ou is  "\|\|";
sugar mult is  "\*";
sugar div is  "\/";
sugar mod is  "\%" ; 
sugar et is  "\&\&";
sugar non is  "\!";
sugar vrai is  "true";
sugar faux is  "false";
term entier is  "[0-9]+";
term ident is  "[_A-Za-z][_0-9A-Za-z]*";

---------- REGLES DE PRODUCTION ----------------------------------------
PROGRAMME -> #init ENTITES #gen;
global
   machine : AbstractMachine;
   
#init {
 do
   machine := PROGRAMME^source.getMachine();
   ENTITES^machine := machine;
   ENTITES^tds := new TDS(nil);
 end
}

#gen {
 do
   call machine.writeCode(PROGRAMME^source.getFileName(), ENTITES^code);
 end
}

ENTITES -> #gen;
#gen {
 do
   ENTITES^code := ENTITES^machine.genFin();
 end
}

ENTITES -> DEFCLASSE ENTITES #gen;
#gen {
 do
   ENTITES^code := DEFCLASSE^code + ENTITES1^code;
 end
}

ENTITES -> DEFINTERFACE ENTITES #gen;
#gen {
 do
   ENTITES^code := DEFINTERFACE^code + ENTITES1^code;
 end
}
-------------------------------------------------------
-- definition d'une classe
-------------------------------------------------------
DEFCLASSE -> classe ident SUPER #gen CORPS #checkandinsert;
global
  c : CLASSE;

#gen {
 local
   i : INFO
   r : INFO
   rc : CLASSE
 do
   i := DEFCLASSE^tds.chercherGlobalement(ident^txt);
   if i /= nil then
     error(B_11, ident^txt);
   else
     if(SUPER^ext.equals(""))
       --pas d'héritage
       c := new CLASSE(true);
     else
       -- héritage
       r := DEFCLASSE^tds.chercherGlobalement(SUPER^ext);
       if r /= nil
         --l'identifiant est trouvé dans la TDS
         rc := r.getType();

         if rc.isAClass() 
           --si l'identifiant représente bien une classe
           c := new CLASSE(rc);
           call c.addSuperClass(SUPER^ext);
         else
           error(B_13,SUPER^ext); 
         end

       else
         error(B_13,SUPER^ext); 
       end
     end
   CORPS^tds = c.getTDS();
   CORPS^isaclass = true;
   end
 end
}

#checkandinsert {
 local
  ic : INFOCLASSE;
  r : INFO;
  rc : INFOCLASSE;
 do
  ic := new INFOCLASSE(c);
  if SUPER^imp.equals("")
     --pas d'implémentation d'interfaces
  else
       -- héritage
       r := DEFCLASSE^tds.chercherGlobalement(SUPER^imp);
       if r /= nil

         --l'identifiant est trouvé dans la TDS
         rc := r.getType();
         if ~c.implementsCorrectly(rc)
           error(B14,ident^txt,SUPER^imp,c.implementGetError());
         else 
           call c.addSuperClass(SUPER^imp);
         end    

       else
         error(B_13,SUPER^ext); 
       end
  end
  
  call DEFCLASSE^tds.inserer(ident^txt, ic);
 end
}


DEFINTERFACE -> interface ident SUPER #gen CORPS #insert;
global
  c : CLASSE;

#gen {
 local
   i : INFO

 do
   i := DEFINTERFACE^tds.chercherGlobalement(ident^txt);
   if i /= nil then
     error(B_12, ident^txt);
   else
     c := new CLASSE(false);
   
   end
   CORPS^tds=c.getTDS();
   CORPS^isaclass = false;
 end
}

#insert {
 local
   ic : INFOCLASSE
 do
   ic := new INFOCLASSE(c);
   call DEFINTERFACE^tds.inserer(ident^txt, ic);
 end
  
}

-------------------------------------------------------
-- 1 extends maximum suivi d'un implements maximum
-------------------------------------------------------
SUPER -> ETEND IMPL #gen;
#gen {
 do
   SUPER^ext := ETEND^ext;
   SUPER^imp := IMPL^imp;
 end
}

ETEND -> #gen;
#gen {
 do
   ETEND^ext := "";
 end
}

ETEND -> etend ident #gen;
#gen {
 do
   ETEND^ext := ident^txt;
 end
}

IMPL -> #gen;
#gen {
 do
   IMPL^imp := "";
 end
}

IMPL -> implemente ident #gen;
#gen {
 do
   IMPL^imp := ident^txt;
 end
}

CORPS -> aco DEFS acf #gen;
#gen {
 do
   CORPS^code := DEFS^code;
 end
}

-------------------------------------------------------
-- les attributs
-------------------------------------------------------
DEFS -> #gen;
#gen {
 do
   DEFS^adr := DEFS^hadr;
   DEFS^code := "";
 end
}

DEFS -> DEF #adr DEFS #gen;
#adr {
 do
   DEFS1^hadr := DEF^adr;
 end
}

#gen {
 do
   DEFS^adr := DEFS1^adr;
   DEFS^code := DEF^code + DEFS1^code;
 end
}

-------------------------------------------------------
-- attribut
-------------------------------------------------------
DEF -> TYPE ident pv  #inf;
#inf {
 local
   i : INFO;
   iv : INFOVAR;
 do
    i := DEF^tds.chercherGlobalement(ident^txt);
    if i /= nil then
       error(B_02, ident^txt);
    else
   -- ajouter l'ident dans la TDS;
    iv := new INFOVAR(TYPE^type, DEF^hadr, "LB");
    call DEF^tds.inserer(ident^txt, iv);
    DEF^adr := DEF^hadr + TYPE^type.getTaille();
    DEF^code := DEF^machine.genDeclAtt(ident^txt, iv);
 end
}

-------------------------------------------------------
-- methode (fonction) 
-------------------------------------------------------
DEF -> TYPE ident paro #tds PARFS parf #transtds MCORPS #inf;
#tds {
 local
 do
   PARFS^tds := new TDS(DEF^tds);
 end
}

#transtds {
  local
  do
    MCORPS^tds := PARFS^tds
  end
}

#inf {
 local
   i : INFO;
   iv : INFOVAR;
 do
    i := DEF^tds.chercherGlobalement(ident^txt);
    if i /= nil then
       error(B_02, ident^txt);
    else
   -- ajouter l'ident dans la TDS;
    iv := new INFOMET(TYPE^type, PARFS^ltype);
    call DEF^tds.inserer(ident^txt, iv);
    DEF^adr := DEF^hadr;
    DEF^code := DEF^machine.genDeclMet(ident^txt);
 end
}

-------------------------------------------------------
-- methode (procedure)
-------------------------------------------------------
DEF -> void ident paro #tds PARFS parf #transtds MCORPS #inf;
#tds {
 local
 do
   PARFS^tds := new TDS(DEF^tds);
 end
}

#transtds {
  local
  do
    MCORPS^tds := PARFS^tds
  end
}

#inf {
 local
   i : INFO;
   iv : INFOVAR;
   t : TYPE;
 do
    i := DEF^tds.chercherLocalement(ident^txt);
    if i /= nil then
       error(B_02, ident^txt);
    else
   -- ajouter l'ident dans la TDS;
    t = new DTYPE("void",0);
    iv := new INFOMET(t, PARFS^args);
    call DEF^tds.inserer(ident^txt, iv);
    DEF^adr := DEF^hadr;
    DEF^code := DEF^machine.genDeclMet(ident^txt);
 end
}

-------------------------------------------------------
-- dans classe ou dans interface
-------------------------------------------------------
MCORPS -> #check pv #gen;
#check {
  local
  do
    if MCORPS^isaclass then
      error(B_17);
    end
  end
}

#gen {
  local
  do
    MCORPS^code := ""
  end
}

MCORPS -> #check BLOC #gen;
#check {
  local
  do
    if ~MCORPS^isaclass then
      error(B_18);
    end
  end
}

#gen {
  local
  do
    MCORPS^code := BLOC^code
  end
}

-------------------------------------------------------
-- constructeur
-------------------------------------------------------
DEF -> ident paro #tds PARFS parf #transtds BLOC #inf ; 
#tds {
 local
 do
   PARFS^tds := new TDS(DEF^tds);
 end
}

#transtds {
  local
  do
    BLOC^tds := PARFS^tds
  end
}

#inf {
 local
   i : INFO;
   iv : INFOVAR;
 do
    i := DEF^tds.chercherGlobalement(ident^txt);
    if i /= nil then
       error(B_02, ident^txt);
    else

   -- ajouter l'ident dans la TDS;
    iv := new INFOMET(new DTYPE("constructeur",0), PARFS^ltype);
    call DEF^tds.inserer(ident^txt, iv);
    DEF^adr := DEF^hadr;
    DEF^code := DEF^machine.genComment("constructeur" + ident^txt);
 end
}

-------------------------------------------------------
-- les types
-------------------------------------------------------
TYPE -> int #type;
#type {
 do
   TYPE^type := new DTYPE("entier", 4);
 end
}

TYPE -> bool #type;
#type {
 do
   TYPE^type := new DTYPE("booleen", 1);
 end
}

TYPE -> ident #type;
#type {
 local
   i : INFO ;
   it : INFOCLASSE;
   t : DTYPE;
 do
   -- rechercher l'ident   
   i := TYPE^tds.chercherGlobalement(ident^txt);
   if i = nil then
     error(B_03, ident^txt);
   else
     match i
       with INFOCLASSE then
         it := i ;
         TYPE^type := it.getType();
       else
         error(B_04, ident^txt);
     end
   end
 end
}

-------------------------------------------------------
-- parametres de methodes
-------------------------------------------------------
-- ne rien faire !
PARFS -> ;

PARFS -> PARF #tds PARFSX ;
#tds {
 local
   i : INFOVAR;
   d : INTEGER;
 do
   d := PARF^type.getTaille();
   i := new INFOVAR(PARF^type, -d, "LB");
   call PARFS^tds.inserer(PARF^name, i);
   PARFSX^dep := d;
 end
}

--ne rien faire !
PARFSX -> ;


PARFSX -> virg  PARF #tds PARFSX ;
#tds {
 local
   i : INFOVAR;
   d : INTEGER;
 do
   d := PARF^type.getTaille() + PARFSX^dep;
   i := new INFOVAR(PARF^type, -d, "LB");
   call PARFSX^tds.inserer(PARF^name, i);
   PARFSX1^dep := PARFSX^dep + d;
 end
}

PARF -> TYPE ident #tds;
#tds {
 do
   PARF^type := TYPE^type;
   PARF^name := ident^txt
 end
}

-------------------------------------------------------
-- corps de methode et bloc d'instructions
-------------------------------------------------------
BLOC -> aco #tds INSTS acf #gen;
#tds {
  local
  do
    INST^tds -> new TDS(BLOC^tds);
  end
}

#gen {
 do
   --libérer les variables locales
   BLOC^code := INSTS^code + BLOC^machine.genFree(INSTS^adr - BLOC^hadr);
 end
}

-------------------------------------------------------
-- instructions
-------------------------------------------------------
INSTS -> #gen;
#gen {
 do
   INSTS^adr := INSTS^hadr;
   INSTS^code := "";
 end
}

INSTS -> INST #adr INSTS #gen;
#adr {
 do
   INSTS1^hadr := INST^adr;
 end
}
#gen {
 do
   INSTS^adr := INSTS1^adr;
   INSTS^code := INST^code + INSTS1^code;
 end
}

-------------------------------------------------------
-- declaration de variable locale avec ou sans init
-------------------------------------------------------
INST-> TYPE ident AFFX pv #gen;
#gen {
 local
   i : INFO;
   iv : INFOVAR;
 do
   i := INST^tds.chercherGlobalement(ident^txt);
   if i /= nil then
     error(B_02, ident^txt);
   elseif ~TYPE^type.compareTo(AFFX^type) then
     error(B_00, TYPE^type, AFFX^type);
   else
     iv := new INFOVAR(TYPE^type, INST^hadr, "LB");
     call INST^tds.inserer(ident^txt, iv);
     INST^adr := INST^hadr + TYPE^type.getTaille();
     INST^code := INST^tam.genDecl(ident^txt, iv, AFFX^code);
 end
}

-------------------------------------------------------
-- instruction expression
-------------------------------------------------------
INST -> E pv #gen;
#gen {
 do
   INST^adr := INST^hadr
   INST^code := E^code;
 end
}

-------------------------------------------------------
-- bloc d'instructions
-------------------------------------------------------
INST -> BLOC #gen;
#gen {
 do
   INST^adr := INST^hadr;
   INST^code := BLOC^code;
 end
}

-------------------------------------------------------
-- conditionnelle
-------------------------------------------------------
-- possibilite de declarations : modifier adr, hadr
INST -> si paro E #type parf BLOC SIX #gen;
#type {
do
 if ~E^type.compareTo(new DTYPE("booleen", 1)) then
   error(B_05, E^type);
 end
end
}

#gen {
 do
   INST^adr := INST^hadr;
   INST^code := INST^machine.genIf(E^code, BLOC^code, SIX^code);
 end
}

SIX -> sinon BLOC #gen;
#gen {
 do
   SIX^code := BLOC^code;
 end
}

SIX -> #gen;
#gen {
 do
   SIX^code := "";
 end
}

-------------------------------------------------------
-- return
-------------------------------------------------------
--AFAIRE
INST -> retour E pv #gen;
#gen {
 do
   INST^adr := INST^hadr;
   INST^code := INST^machine.genReturn(E^code);
 end
}

-------------------------------------------------------
-- les expressions
-------------------------------------------------------
E -> ER AFFX #gen;
#gen {
 local
   i : INFO;
 do
   if ER^est_affectable then
     if AFFX^type.compareTo(new DTYPE("void", 0)) then
       E^est_affectable := true;
       E^type := ER^type;
       E^code := ER^code;
     else
       if ~AFFX^type.compareTo(ER^type)) then
         error(B_00, ER^type, AFFX^type);
       else
         E^est_affectable := false;
         E^type := new DTYPE("void", 0);
         E^code := AFFX^code + ER^code + E^machine.genWriteMem(ER^type.getTaille());
       end
     end
   else
     if ~AFFX^type.compareTo(new DTYPE("void", 0)) then
       error(B_10);
     else
       E^est_affectable := false;
       E^type := ER^type;
       E^code := ER^code + AFFX^code;
     end
   end
 end
}


-------------------------------------------------------
-- affectation
-------------------------------------------------------
AFFX -> affect ER #gen;
#gen {
 do
   AFFX^type := ER^type;
   AFFX^code := ER^code;
 end
}

AFFX -> #gen;
#gen {
 do
   AFFX^type := new DTYPE("void", 0);
   AFFX^code := "";
 end
}

-------------------------------------------------------
-- relation
-------------------------------------------------------
ER -> ES ERX #gen;
#gen {
 do
   if ~ERX^type.compareTo(new DTYPE("void", 0))&~ERX^type.compareTo(ES^type) then
     error(B_00, ES^type, ERX^type);
   elseif ~ERX^est_affectable then
     ER^est_affectable := false;
   else
     ER^est_affectable := ES^est_affectable;
   end
   ER^type := ES^type;
   ER^code := ES^code + ERX^code;
 end
}

ES -> T ESX #gen;
#gen {
 do
   if ~ESX^type.compareTo(new DTYPE("void", 0))&~ESX^type.compareTo(T^type) then
     error(B_00, ESX^type, T^type);
   elseif ~ESX^est_affectable then
     ES^est_affectable := false;
   else
     ES^est_affectable := T^est_affectable;
   end
   ES^type := T^type;
   ES^code := T^code + ESX^code;
 end
}

ERX -> OPREL ES #gen;
#gen {
 do
   ERX^est_affectable := false;
   ERX^type := new DTYPE("booleen", 1);
   ERX^code := ES^code + OPREL^code;
 end
}

ERX -> #gen;
#gen {
 do
   ERX^est_affectable := true;
   ERX^type := new DTYPE("void", 0);
   ERX^code := "";
 end
}

OPREL -> inf #gen;
#gen {
 do
   OPREL^code := OPREL^machine.genOpLss();
 end
}

OPREL -> infeg #gen;
#gen {
 do
   OPREL^code := OPREL^machine.genOpLeq();
 end
}

OPREL -> sup #gen;
#gen {
 do
   OPREL^code := OPREL^machine.genOpGtr();
 end
}

OPREL -> supeg #gen;
#gen {
 do
   OPREL^code := OPREL^machine.genOpGeq();
 end
}

OPREL -> eg #gen;
#gen {
 do
   OPREL^code := OPREL^machine.genOpEq();
 end
}

OPREL -> neg #gen;
#gen {
 do
   OPREL^code := OPREL^machine.genOpNeq();
 end
}

-------------------------------------------------------
-- addition, ...
-------------------------------------------------------
ESX -> OPADD T ESX #gen;
#gen {
 do
   if ~T^type.compareTo(OPADD^type) then
     error(B_00, T^type, OPADD^type);
   elseif ~ESX1^type.compareTo(new DTYPE("void", 0))&~T^type.compareTo(ESX1^type) then
     error(B_00, T^type, ESX1^type);
   else
     ESX^est_affectable := false;
     ESX^type := T^type;
     ESX^code := T^code + ESX1^code + OPADD^code;
   end
 end
}

ESX -> #gen;
#gen {
 do
   ESX^est_affectable := true;
   ESX^type := new DTYPE("void", 0);
   ESX^code := "";
 end
}

OPADD -> plus #gen;
#gen {
 do
   OPADD^type := new DTYPE("entier", 4);
   OPADD^code := OPADD^machine.genOpAdd();
 end
}

OPADD -> moins #gen;
#gen {
 do
   OPADD^type := new DTYPE("entier", 4);
   OPADD^code := OPADD^machine.genOpSub();
 end
}

OPADD -> ou #gen;
#gen {
 do
   OPADD^type := new DTYPE("booleen", 1);
   OPADD^code := OPADD^machine.genOpOr();
 end
}

T ->  F TX #gen;
#gen {
 do
   if ~F^type.compareTo(TX^type) then
     error(B_00, F^type, TX^type);
   else
     if ~TX^est_affectable then
       T^est_affectable := false;
     else
       T^est_affectable := F^est_affectable;
     end
     T^type := TX^type;
     T^code := F^code + TX^code;
   end
 end
}

-------------------------------------------------------
-- multiplication, ...
-------------------------------------------------------
TX -> OPMUL F TX #gen;
#gen {
 do
   if ~F^type.compareTo(OPMUL^type) then
     error(B_00, F^type, OPMUL^type);
   elseif ~TX1^type.compareTo(new DTYPE("void", 0))&~F^type.compareTo(TX1^type) then
     error(B_00, F^type, TX1^type);
   else
     TX^est_affectable := false;
     TX^type := F^type;
     TX^code := F^code + TX1^code + OPMUL^code;
   end
 end
}

TX -> #gen;
#gen {
 do
   TX^est_affectable := true;
   TX^type := new DTYPE("void", 0);
   TX^code := "";
 end
}

OPMUL -> mult #gen;
#gen {
 do
   OPMUL^type := new DTYPE("entier", 4);
   OPMUL^code := OPUN^machine.genOpMul();
 end
}

OPMUL -> div #gen;
#gen {
 do
   OPMUL^type := new DTYPE("entier", 4);
   OPMUL^code := OPUN^machine.genOpDiv();
 end
}

OPMUL -> mod #gen;
#gen {
 do
   OPMUL^type := new DTYPE("entier", 4);
   OPMUL^code := OPUN^machine.genOpMod();
 end
}

OPMUL -> et #gen;
#gen {
 do
   OPMUL^type := new DTYPE("booleen", 1);
   OPMUL^code := OPUN^machine.genOpAnd();
 end
}

-------------------------------------------------------
-- expressions de base
-------------------------------------------------------
F -> entier #gen;
#gen {
 do
   F^est_affectable := false;
   F^type := new DTYPE("entier", 4);
   F^code := F^machine.genCst(entier^txt);
 end
}

F -> vrai #gen;
#gen {
 do
   F^est_affectable := false;
   F^type := new DTYPE("booleen", 1);
   F^code := F^machine.genCst("1");
 end
}

F -> faux #gen;
#gen {
 do
   F^est_affectable := false;
   F^type := new DTYPE("booleen", 1);
   F^code := F^machine.genCst("0");
 end
}

-------------------------------------------------------
-- unaire
-------------------------------------------------------
F -> OPUN F #gen;
#gen {
 do
   if ~F1^type.compareTo(OPUN^type) then
     error(B_00, F1^type, OPUN^type);
   else
     F^est_affectable := false;
     F^type := F1^type;
     F^code := F1^code + OPUN^code;
   end
 end
}

OPUN -> plus #gen;
#gen {
 do
   OPUN^type := new DTYPE("entier", 4);
   OPUN^code := OPUN^machine.genOpPlus();
 end
}

OPUN -> moins #gen;
#gen {
 do
   OPUN^type := new DTYPE("entier", 4);
   OPUN^code := OPUN^machine.genOpMoins();
 end
}

OPUN -> non #gen;
#gen {
 do
   OPUN^type := new DTYPE("booleen", 1);
   OPUN^code := OPUN^machine.genOpNon();
 end
}

-------------------------------------------------------
-- null
-------------------------------------------------------
--AFAIRE
F -> null #gen;
#gen {
 do
   F^est_affectable := false;
   F^type := new POINTEUR(nil);
   F^code := F^machine.genCst("0");
 end
}

F -> paro E parf #gen;
#gen {
 do
   F^est_affectable := E^est_affectable;
   F^type := E^type;
   F^code := E^code;
 end
}

-------------------------------------------------------
-- new
-------------------------------------------------------
-- AFAIRE
F -> nouveau TYPE paro ARGS parf #gen;
#gen {
 local
 do
   if ~TYPE^ltype.compareTo(ARGS^ltype) then
     error(B_16);
   else
     F^est_affectable := false;
     F^type := new POINTEUR(nil);
     F^code := "";
   end
 end
}

F -> ident #tra Q #gen;
#tra {
 do
   Q^hident := ident^txt;
 end
}
#gen {
 do
   F^est_affectable := Q^est_affectable;
   F^type := Q^type;
   F^code := Q^code;
 end
}

-------------------------------------------------------
-- Q = qualificateur de variable
-------------------------------------------------------
Q -> #gen;
#gen {
 local 
   iv : INFOVAR;
   i : INFO;
 do
   i := Q^tds.chercherGlobalement(Q^hident);
   if i = nil then
     error(B_07, ident^txt);
   end
   match i
   with INFOVAR then
     iv := i;
     Q^type := iv.getType();
     Q^est_affectable := true;
     Q^code :=Q^machine.genAdr(iv.getDep(), iv.getReg());
   else
     error(B_08, ident^txt);
   end
 end
}

-------------------------------------------------------
-- acces attribut ou méthode
-------------------------------------------------------
Q -> pt ident #tra Q #gen;
#tra {
 local
   i : INFO;
   ic : INFOCLASSE;
 do
   i : Q^tds.chercherGlobalement(Q^hident);
   if i = nil then
     error(B_07, ident^txt);
   end
   match i
   with INFOCLASSE then
     ic := i;
     Q1^hident := ident^txt;
     Q1^tds := ic.getTds;
   else
     error(B_13, Q^hident);
   end
 end
}
#gen {
 do
   Q^est_affectable := Q1^est_affectable;
   Q^type := Q1^type;
   Q^code := Q1^code;
 end
}

-------------------------------------------------------
-- arguments d'appel de methode
-------------------------------------------------------
-- AFAIRE : manque la génération de code
Q -> paro ARGS #check parf Q #gen;
#check {
 do
   if ~ARGS^ltype.compareTo(Q^ltype) then
     error(B_16);
   end
 end
}
#gen {
 do
   Q^code := Q^machine.genCall(Q^hident, ARGS^code) + Q1^code;
 end
}

ARGS -> E ARGSX #gen;
#gen {
 do
   ARGS^code := ARGSX^code + E^code;
 end
}

ARGS -> #gen;
#gen {
 do
   ARGS^code := "";
 end
}

ARGSX -> virg E ARGSX #gen;
#gen {
 do
   ARGS^code := ARGSX^code + E^code;
 end
}

ARGSX -> #gen;
#gen {
 do
   ARGSX^code := "";
 end
}

end
